<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
             http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
            ">

	<!-- 开启注解处理器 -->
	<context:annotation-config />
	
	<!-- 注解需要扫描的包 -->
	<context:component-scan base-package="com.maker.app" />
	
    <!-- properties 文件注入 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 导入quartz配置 -->
	<import resource="quartz.xml" />
	 
	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />
	    
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.minIdle}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" /> 
	</bean>
 

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath:com/maker/app/mapper/*Mapper.xml"/>
	</bean>
	
	<!-- 
	   tx事务或注解事务，二者选其一 （见com.maker.app.service.impl.PlatSmsCodeService.getSmsCode()方法处理！）
	         当使用tx配置事务时，在service层方法的catch语句中增加：TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();语句，手动回滚，这样上层就无需去处理异常
	         当使用@Transactional注解事务时，在service的方法中不使用try catch 或者在catch中最后加上throw new runtimeexcetpion()，这样程序异常时才能被捕获进而回滚
	-->
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!--配置tx的aop注解 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 对select/find/search等开头的方法要求只读事务  --> 
            <tx:method name="select*" propagation="REQUIRED" read-only="true"/> 
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="search*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="read*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="count*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="list*" propagation="REQUIRED" read-only="true"/>  
            <!-- 对其它方法要求事务 -->  
            <tx:method name="*" propagation="REQUIRED" rollback-for="RuntimeException"/>  
        </tx:attributes>
    </tx:advice>
    <!-- 事务aop -->
    <aop:config>
      <aop:pointcut id="allManagerMethod"
       expression="execution(* com.maker.app.service.impl.*.*(..))" />
      <aop:advisor pointcut-ref="allManagerMethod"
       advice-ref="txAdvice" />
    </aop:config>    
	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务(注解事务)  
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	-->
	 
</beans>
